---
description: This rule is used for onboarding.
globs: 
alwaysApply: false
---
# 🥒 Pickles オンボーディングガイド

> 新しい開発者がPicklesアプリケーションを完全に理解するための学習ガイド

このガイドに従って学習することで、Picklesの**全体アーキテクチャから具体的な実装詳細**まで段階的に理解できます。

---

## 📚 学習ステップ

### **Step 1: コーディング規約の理解**
**目的**: プロジェクトで採用されているコーディング標準を学ぶ

**📖 読むべきファイル**:
```
.cursor/rules/clean-functional-python-standards.md
```

**🎯 学習すべき内容**:
- [ ] 認知コスト7以下の原則
- [ ] Python関数型プログラミングのアプローチ
- [ ] 凝集度・結合度の最適化
- [ ] 型ヒントとエラーハンドリングの方針
- [ ] 禁止事項と推奨パターン

**❓ 確認問題**:
- 認知コストの計算方法は？
- 関数分割の判断基準は？
- Pythonic実装の優先順位は？

---

### **Step 2: プロジェクト概要の把握**
**目的**: アプリケーションの全体像と目的を理解する

**📖 読むべきファイル**:
```
README.md
```

**🎯 学習すべき内容**:
- [ ] Picklesアプリケーションの目的と機能
- [ ] 必要なAPI設定（Notion、OpenAI、メール）
- [ ] 実行方法とコマンドライン引数
- [ ] プロジェクト構成とディレクトリ構造
- [ ] uvパッケージマネージャーの利点
- [ ] スケジューラーの動作

**❓ 確認問題**:
- このアプリケーションは何を解決するのか？
- 3つのAPI設定はそれぞれ何のために必要か？
- デフォルトの実行設定は？

---

### **Step 3: アプリケーション構造の理解**
**目的**: Input-Throughput-Outputアーキテクチャとメインフローを把握する

**📖 読むべきファイル**:
```
main.py
utils/printer.py
utils/__init__.py
```

**🎯 学習すべき内容**:
- [ ] `PicklesSystem`クラスの役割と責務
- [ ] `run_analysis()`メソッドの実行フロー
- [ ] コマンドライン引数の解析ロジック
- [ ] 定期実行スケジューラーの仕組み
- [ ] 各オプションの意味と選択肢
- [ ] エラーハンドリングの階層

**❓ 確認問題**:
- データの流れは？（Input → Throughput → Output）
- 5つの配信方法はそれぞれ何か？
- スケジューラーはいつ実行されるか？

---

### **Step 4: INPUT層の詳細理解**
**目的**: データ取得層の実装を理解する

**📖 読むべきファイル**:
```
inputs/__init__.py
inputs/notion_input.py
```

**🎯 学習すべき内容**:
- [ ] `NotionInput`クラスの設計
- [ ] `database_entries`と`recent_documents`の違い
- [ ] Notion API連携の実装
- [ ] `NotionInputError`の使用場面
- [ ] データ取得の日数フィルタリング
- [ ] 返却データの構造

**❓ 確認問題**:
- 2つのデータソースはどう使い分けるか？
- Notion APIから取得するデータの形式は？
- エラー時の処理フローは？

---

### **Step 5: THROUGHPUT層の詳細理解**
**目的**: 分析処理層の実装を理解する

**📖 読むべきファイル**:
```
throughput/__init__.py
throughput/analyzer.py
```

**🎯 学習すべき内容**:
- [ ] `DocumentAnalyzer`クラスの設計
- [ ] 3つの分析タイプの違いと用途
- [ ] OpenAI API連携の実装
- [ ] `AnalysisError`の使用場面
- [ ] フィルタリング機能の動作
- [ ] 分析結果の構造

**❓ 確認問題**:
- `comprehensive`、`emotional`、`productivity`の違いは？
- OpenAI APIはどのモデルを使用しているか？
- 分析結果にはどんな情報が含まれるか？

---

### **Step 6: OUTPUT層の詳細理解**
**目的**: レポート生成・配信層の実装を理解する

**📖 読むべきファイル**:
```
outputs/__init__.py
outputs/report_generator.py
```

**🎯 学習すべき内容**:
- [ ] `ReportDelivery`クラスの設計
- [ ] 5つの配信方法の実装詳細
- [ ] メール送信の設定と認証
- [ ] HTMLとテキスト形式の生成
- [ ] ファイル出力の仕組み
- [ ] `OutputError`の使用場面

**❓ 確認問題**:
- 複数配信方法を同時指定した場合の動作は？
- HTMLレポートとテキストレポートの違いは？
- メール送信に失敗した場合の処理は？

---

### **Step 7: ユーティリティとログ機能の理解**
**目的**: 共通機能とデバッグ支援機能を理解する

**📖 読むべきファイル**:
```
utils/logger.py
utils/printer.py
```

**🎯 学習すべき内容**:
- [ ] `Logger`クラスの役割
- [ ] `UsagePrinter`の機能
- [ ] 定数定義の構造（`SimpleNamespace`の活用）
- [ ] ログ出力のタイミングと内容
- [ ] ヘルプ表示の仕組み

**❓ 確認問題**:
- どのタイミングでログが出力されるか？
- 定数定義にTypeScriptライクな構造を採用した理由は？

---

### **Step 8: 設定とデプロイメントの理解**
**目的**: 環境設定とプロダクション運用を理解する

**📖 読むべきファイル**:
```
pyproject.toml
.env.example (存在する場合)
```

**🎯 学習すべき内容**:
- [ ] uvプロジェクト設定の構造
- [ ] 依存関係の管理方法
- [ ] 環境変数の設定項目
- [ ] セキュリティ考慮事項
- [ ] プロダクション運用のベストプラクティス

**❓ 確認問題**:
- 新しい依存関係を追加するコマンドは？
- `.env`ファイルで設定すべき項目は？
- セキュリティ上注意すべき点は？

---

## 🎯 学習完了の確認

### **総合理解チェック**
以下の質問にすべて答えられれば、Picklesアプリケーションを完全に理解できています：

#### **アーキテクチャ理解**
- [ ] Input-Throughput-Outputの各層の役割を説明できる
- [ ] データの流れを図示できる
- [ ] 各クラスの責務と依存関係を説明できる

#### **実装理解**
- [ ] 新しいデータソースを追加する手順を説明できる
- [ ] 新しい分析タイプを追加する手順を説明できる
- [ ] 新しい配信方法を追加する手順を説明できる

#### **運用理解**
- [ ] 本番環境での設定手順を説明できる
- [ ] トラブルシューティングの方法を説明できる
- [ ] パフォーマンス最適化のポイントを説明できる

---

## 🚀 次のステップ

### **機能拡張の準備**
学習完了後は以下の活動に取り組めます：

1. **新機能の設計**: CFPSガイドラインに従った設計
2. **既存機能の改善**: 認知コスト削減やパフォーマンス向上
3. **テストの追加**: 各層のユニットテスト・統合テスト
4. **ドキュメントの拡充**: API仕様書やトラブルシューティングガイド

### **推奨学習リソース**
- [Notion API Documentation](https://developers.notion.com/)
- [OpenAI API Documentation](https://platform.openai.com/docs)
- [uv Documentation](https://github.com/astral-sh/uv)
- [APScheduler Documentation](https://apscheduler.readthedocs.io/)

---

## 📞 サポート

学習中に不明な点がある場合は：
1. まず該当ファイルのコメントとdocstringを確認
2. READMEのトラブルシューティングセクションを参照
3. チームメンバーに質問（具体的なファイル名・行数を含めて）

**Happy Learning! 🥒**